name: cve-monitor

on:
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:
jobs:
  cve-monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    environment: CI
    steps:
      - name: checkout the repo
        uses: actions/checkout@v2
      
      - name: 生成前端配置文件
        run: |
          # 为前端生成安全的配置文件
          cat > docs/config.json << EOF
          {
            "github_token": "${{ secrets.GH_TOKEN }}",
            "api_base_url": "https://api.github.com",
            "repository": "adminlove520/github_cve_monitor",
            "generated_at": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
          }
          EOF
          
          cat > docs/Data/config.json << EOF
          {
            "github_token": "${{ secrets.GH_TOKEN }}",
            "api_base_url": "https://api.github.com",
            "repository": "adminlove520/github_cve_monitor",
            "generated_at": "$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
          }
          EOF
          
          echo "✅ 前端配置文件已生成"
      - name: install dependencies
        run: |
          pip3 install -r requirements.txt
      - name: run scraper
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          python3 main.py
      - name: save changes
        run: |
          git config --global user.email "cve-monitor@users.noreply.github.com"
          git config --global user.name "CVE-Bot"
          DATE_STR=$(date +"%Y-%m-%d")
          git commit --all --message "每日情报速递更新：daily_${DATE_STR}.md" || echo "no changes to commit"
          git push
      - name: Update Wiki
        run: |
          # 检查是否配置了secrets.GH_TOKEN，如果没有则使用GitHub Actions内置的GITHUB_TOKEN
          if [ -z "${{ secrets.GH_TOKEN }}" ]; then
            echo "未配置secrets.GH_TOKEN，使用GitHub Actions内置的GITHUB_TOKEN"
            WIKI_TOKEN="${{ secrets.GH_TOKEN }}"
          else
            echo "使用配置的secrets.GH_TOKEN"
            WIKI_TOKEN="${{ secrets.GH_TOKEN }}"
          fi
          
          # 确保Token不为空
          if [ -z "$WIKI_TOKEN" ]; then
            echo "错误: 未找到有效的GitHub Token，无法更新Wiki"
            exit 1
          fi
          
          # 克隆 Wiki 仓库
          git clone https://x-access-token:$WIKI_TOKEN@github.com/adminlove520/github_cve_monitor.wiki.git wiki
          cd wiki
          
          # 更新主页
          cp ../wiki_content/Home.md ./Home.md
          
          # 更新每日报告页面
          DATE_STR=$(date +"%Y-%m-%d")
          WEEK_STR=$(date +"%Y-W%V-%m-%d")
          
          # 动态生成每日报告页面
          cat > "每日报告.md" << EOF
          # 每日情报速递
          
          > CVE 监控系统每日自动生成的安全情报报告
          
          ## 最新报告
          
          ### 2025年9月
          
          #### Week 38
          
          - 📅 [${DATE_STR} 每日报告](https://adminlove520.github.io/github_cve_monitor/#/Data/${WEEK_STR}/daily_${DATE_STR//-/}.md) - 最新
          EOF
          
          # 添加历史报告链接
          if [ -d "../docs/Data" ]; then
            echo "" >> "每日报告.md"
            for dir in ../docs/Data/*/; do
              if [ -d "$dir" ]; then
                dir_name=$(basename "$dir")
                if [ "$dir_name" != "${WEEK_STR}" ]; then
                  for file in "$dir"daily_*.md; do
                    if [ -f "$file" ]; then
                      file_name=$(basename "$file" .md)
                      date_part=$(echo "$file_name" | sed 's/daily_//' | sed 's/\(.\{4\}\)\(.\{2\}\)\(.\{2\}\)/\1-\2-\3/')
                      echo "- 📅 [$date_part 每日报告](https://adminlove520.github.io/github_cve_monitor/#/Data/$dir_name/$file_name.md)" >> "每日报告.md"
                    fi
                  done
                fi
              fi
            done
          fi
          
          # 添加报告说明
          cat >> "每日报告.md" << 'EOF'
          
          ## 报告内容说明
          
          每日报告包含以下信息：
          
          ### 📈 基本统计
          - 生成时间
          - 数据来源
          - 总记录数
          - 新增CVE数量
          
          ### 🔍 CVE详情
          每个CVE条目包含：
          - **CVE编号**: 官方CVE标识符
          - **相关仓库**: GitHub上的POC/EXP仓库链接
          - **描述**: 漏洞详细描述
          - **日期**: 发现/更新日期
          
          ### 📈 数据格式
          ```
          | CVE | 相关仓库（poc/exp） | 描述 | 日期 |
          |:---|:---|:---|:---|
          | [CVE-YYYY-NNNNN](链接) | [仓库名](仓库链接) | 漏洞描述 | 日期时间 |
          ```
          
          ## 使用说明
          
          1. **查看最新报告**: 点击上方最新日期的报告链接
          2. **搜索特定CVE**: 使用浏览器的搜索功能 (Ctrl+F) 查找特定CVE编号
          3. **导出数据**: 报告支持复制粘贴到其他文档
          4. **订阅更新**: Watch 仓库以接收更新通知
          
          ## 自动化流程
          
          ```mermaid
          graph TD
              A[每日凌晨1:00 UTC] --> B[GitHub Actions 触发]
              B --> C[运行 Python 脚本]
              C --> D[收集GitHub CVE数据]
              D --> E[生成Markdown报告]
              E --> F[提交到仓库]
              F --> G[更新GitHub Pages]
              G --> H[同步到Wiki]
          ```
          
          ## 数据来源
          
          - **GitHub CVE数据库**: https://github.com/advisories
          - **API限制**: 每小时5000次请求（使用Token认证）
          - **数据范围**: 包含POC/EXP的CVE记录
          
          ---
          
          💡 **提示**: 建议定期查看每日报告，及时了解最新的安全漏洞信息。
          EOF
          
          # 更新其他页面
          cp ../wiki_content/关于项目.md "./关于项目.md"
          cp ../wiki_content/更新日志.md "./更新日志.md"
          cp ../wiki_content/统计数据.md "./统计数据.md"
          
          # 提交更新
          git config user.name "CVE-Bot"
          git config user.email "cve-monitor@users.noreply.github.com"
          git add .
          git commit -m "更新Wiki文档 - ${DATE_STR}" || echo "Wiki no changes to commit"
          git push
      # - name: Update Wiki
      #   run: |
      #     # 克隆 Wiki 仓库
      #     git clone https://${GITHUB_TOKEN}@github.com/adminlove520/github_cve_monitor.wiki.git wiki
      #     cd wiki
      #     
      #     # 更新主页
      #     cp ../wiki_content/Home.md ./Home.md
      #     
      #     # 更新每日报告页面
      #     DATE_STR=$(date +"%Y-%m-%d")
      #     WEEK_STR=$(date +"%Y-W%V-%m-%d")
      #     
      #     # 动态生成每日报告页面
      #     cat > "每日报告.md" << EOF
      #     # 每日情报速递
      #     
      #     # > CVE 监控系统每日自动生成的安全情报报告
      #     
      #     # ## 最新报告
      #     
      #     # ### 2025年9月
      #     
      #     # #### Week 38
      #     
      #     # - 📅 [${DATE_STR} 每日报告](https://adminlove520.github.io/github_cve_monitor/#/Data/${WEEK_STR}/daily_${DATE_STR//-/}.md) - 最新
      #     # EOF
      #     
      #     # # 添加历史报告链接
      #     # if [ -d "../docs/Data" ]; then
      #     #   echo "" >> "每日报告.md"
      #     #   for dir in ../docs/Data/*/; do
      #     #     if [ -d "$dir" ]; then
      #     #       dir_name=$(basename "$dir")
      #     #       if [ "$dir_name" != "${WEEK_STR}" ]; then
      #     #         for file in "$dir"daily_*.md; do
      #     #           if [ -f "$file" ]; then
      #     #             file_name=$(basename "$file" .md)
      #     #             date_part=$(echo "$file_name" | sed 's/daily_//' | sed 's/\(.\{4\}\)\(.\{2\}\)\(.\{2\}\)/\1-\2-\3/')
      #     #             echo "- 📅 [$date_part 每日报告](https://adminlove520.github.io/github_cve_monitor/#/Data/$dir_name/$file_name.md)" >> "每日报告.md"
      #     #           fi
      #     #         done
      #     #       fi
      #     #     fi
      #     #   done
      #     # fi
      #     
      #     # # 添加报告说明
      #     # cat >> "每日报告.md" << 'EOF'
      #     
      #     # ## 报告内容说明
      #     
      #     # 每日报告包含以下信息：
      #     
      #     # ### 📈 基本统计
      #     # - 生成时间
      #     # - 数据来源
      #     # - 总记录数
      #     # - 新增CVE数量
      #     
      #     # ### 🔍 CVE详情
      #     # 每个CVE条目包含：
      #     # - **CVE编号**: 官方CVE标识符
      #     # - **相关仓库**: GitHub上的POC/EXP仓库链接
      #     # - **描述**: 漏洞详细描述
      #     # - **日期**: 发现/更新日期
      #     
      #     # ### 📈 数据格式
      #     # \`\`\`magic
      #     # | CVE | 相关仓库（poc/exp） | 描述 | 日期 |
      #     # |:---|:---|:---|:---|
      #     # | [CVE-YYYY-NNNNN](链接) | [仓库名](仓库链接) | 漏洞描述 | 日期时间 |
      #     # \`\`\`
      #     
      #     # ## 使用说明
      #     
      #     # 1. **查看最新报告**: 点击上方最新日期的报告链接
      #     # 2. **搜索特定CVE**: 使用浏览器的搜索功能 (Ctrl+F) 查找特定CVE编号
      #     # 3. **导出数据**: 报告支持复制粘贴到其他文档
      #     # 4. **订阅更新**: Watch 仓库以接收更新通知
      #     
      #     # ## 自动化流程
      #     
      #     # \`\`\`mermaid
      #     # graph TD
      #     #     A[每日凌晨1:00 UTC] --> B[GitHub Actions 触发]
      #     #     B --> C[运行 Python 脚本]
      #     #     C --> D[收集GitHub CVE数据]
      #     #     D --> E[生成Markdown报告]
      #     #     E --> F[提交到仓库]
      #     #     F --> G[更新GitHub Pages]
      #     #     G --> H[同步到Wiki]
      #     # \`\`\`
      #     
      #     # ## 数据来源
      #     
      #     # - **GitHub CVE数据库**: https://github.com/advisories
      #     # - **API限制**: 每小时5000次请求（使用Token认证）
      #     # - **数据范围**: 包含POC/EXP的CVE记录
      #     
      #     # ---
      #     
      #     # 💡 **提示**: 建议定期查看每日报告，及时了解最新的安全漏洞信息。
      #     # EOF
      #     
      #     # # 更新其他页面
      #     # cp ../wiki_content/关于项目.md "./关于项目.md"
      #     # cp ../wiki_content/更新日志.md "./更新日志.md"
      #     # cp ../wiki_content/统计数据.md "./统计数据.md"
      #     
      #     # # 提交更新
      #     # git config user.name "CVE-Bot"
      #     # git config user.email "cve-monitor@users.noreply.github.com"
      #     # git add .
      #     # git commit -m "更新Wiki文档 - ${DATE_STR}" || echo "Wiki no changes to commit"
      #     # git push
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}